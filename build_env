#!/bin/bash

# This assumes a new venv has been setup
#   virtualenv venv
#   source venv/bin/activate

BDIR=$(cd $(dirname $0) && pwd)

# Instal basic tools as needed
sudo apt-get update
sudo apt-get install cmake

sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler
sudo apt-get install --no-install-recommends libboost-all-dev

sudo apt-get install libatlas-base-dev

sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev

sudo apt-get install cmake

# Grab initial python packages

#for p in `cat requirements.txt`; do pip install $p; done

# Install OpenCV 2.4.11

#wget http://downloads.sourceforge.net/project/opencvlibrary/opencv-unix/2.4.11/opencv-2.4.11.zip
unzip opencv-2.4.11.zip
cd opencv-2.4.11
mkdir release
cd release

cmake -G "Unix Makefiles" -D CMAKE_INSTALL_PREFIX=$BDIR/venv -D CMAKE_CXX_COMPILER=/usr/bin/g++ CMAKE_C_COMPILER=/usr/bin/gcc -D CMAKE_BUILD_TYPE=RELEASE -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D BUILD_EXAMPLES=ON -D WITH_QT=ON -D WITH_OPENGL=ON -D BUILD_FAT_JAVA_LIB=ON -D INSTALL_TO_MANGLED_PATHS=ON -D INSTALL_CREATE_DISTRIB=ON -D INSTALL_TESTS=ON -D ENABLE_FAST_MATH=ON -D WITH_IMAGEIO=ON -D BUILD_SHARED_LIBS=ON -D WITH_GSTREAMER=ON -D WITH_CUDA=OFF ..

make all -j4 # 4 cores
make install


# Install nvcaffe
cd $BDIR

git clone https://github.com/NVIDIA/caffe
cd caffe

# Add CUDNN support

git clone https://github.com/NVIDIA/caffe
cd caffe


cat Makefile.config.example | sed 's/.*#.*USE_CUDNN/USE_CUDNN/g' | \
                              sed 's/.*#.*WITH_PYTHON_LAYER/WITH_PYTHON_LAYER/g' > Makefile.config

make -j4 all
make -j4 pycaffe

cd ..
